//### This file created by BYACC 1.8(/Java extension  1.13)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//###           14 Sep 06  -- Keltin Leung-- ReduceListener support, eliminate underflow report in error recovery
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 11 "Parser.y"
package decaf.frontend;

import decaf.tree.Tree;
import decaf.tree.Tree.*;
import decaf.error.*;
import java.util.*;
//#line 25 "Parser.java"
interface ReduceListener {
  public boolean onReduce(String rule);
}




public class Parser
             extends BaseParser
             implements ReduceListener
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

ReduceListener reduceListener = null;
void yyclearin ()       {yychar = (-1);}
void yyerrok ()         {yyerrflag=0;}
void addReduceListener(ReduceListener l) {
  reduceListener = l;}


//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:SemValue
String   yytext;//user variable to return contextual strings
SemValue yyval; //used to return semantic vals from action routines
SemValue yylval;//the 'lval' (result) I got from yylex()
SemValue valstk[] = new SemValue[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new SemValue();
  yylval=new SemValue();
  valptr=-1;
}
final void val_push(SemValue val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    SemValue[] newstack = new SemValue[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final SemValue val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final SemValue val_peek(int relative)
{
  return valstk[valptr-relative];
}
//#### end semantic value section ####
public final static short VOID=257;
public final static short BOOL=258;
public final static short INT=259;
public final static short STRING=260;
public final static short CLASS=261;
public final static short NULL=262;
public final static short EXTENDS=263;
public final static short THIS=264;
public final static short WHILE=265;
public final static short FOR=266;
public final static short IF=267;
public final static short ELSE=268;
public final static short RETURN=269;
public final static short BREAK=270;
public final static short NEW=271;
public final static short PRINT=272;
public final static short READ_INTEGER=273;
public final static short READ_LINE=274;
public final static short LITERAL=275;
public final static short IDENTIFIER=276;
public final static short AND=277;
public final static short OR=278;
public final static short STATIC=279;
public final static short INSTANCEOF=280;
public final static short LESS_EQUAL=281;
public final static short GREATER_EQUAL=282;
public final static short EQUAL=283;
public final static short NOT_EQUAL=284;
public final static short SCOPY=285;
public final static short VAR=286;
public final static short SEALED=287;
public final static short DIVIDER=288;
public final static short ARRAY_REPEAT=289;
public final static short ARRAY_CONCAT=290;
public final static short DEFAULT=291;
public final static short IN=292;
public final static short FOREACH=293;
public final static short LISTFORR=294;
public final static short LISTFORL=295;
public final static short UMINUS=296;
public final static short EMPTY=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    3,    4,    5,    5,    5,    5,    5,
    5,    2,    2,    6,    6,    7,    7,    7,    9,    9,
   10,   10,    8,    8,   11,   12,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
   14,   24,   24,   16,   16,   26,   26,   27,   15,   17,
   17,   17,   17,   30,   30,   28,   28,   31,   31,   31,
   29,   33,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   34,   34,   34,   35,   35,   36,
   36,   32,   32,   37,   37,   19,   20,   23,   18,   38,
   38,   21,   21,   22,
};
final static short yylen[] = {                            2,
    1,    2,    1,    2,    2,    1,    1,    1,    1,    2,
    3,    7,    6,    2,    0,    2,    2,    0,    1,    0,
    3,    1,    7,    6,    3,    2,    0,    1,    2,    1,
    1,    2,    1,    1,    1,    2,    2,    2,    1,    7,
    9,    2,    2,    5,    3,    3,    0,    3,    6,    3,
    4,    1,    0,    2,    0,    2,    4,    2,    2,    4,
    5,    1,    7,    9,    6,    6,    1,    1,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    2,    2,    3,    3,    1,
    4,    5,    6,    5,    1,    1,    1,    2,    3,    3,
    1,    1,    0,    3,    1,    5,    9,    1,    6,    2,
    0,    2,    1,    4,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    3,    0,    0,    2,    0,    0,
    0,   14,   18,    0,    0,   18,    7,    8,    6,    9,
    0,    0,   13,   16,    0,    0,   17,    0,   10,    0,
    4,    0,    0,   12,    0,    0,   11,    0,   22,    0,
    0,    0,    0,    5,    0,    0,    0,   27,   24,   21,
   23,    0,   97,   90,    0,    0,    0,    0,  108,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   25,
    0,    0,    0,   31,   39,   26,   28,    0,   30,    0,
   33,   34,   35,    0,    0,    0,    0,    0,    0,    0,
   67,   69,   95,    0,    0,    0,    0,    0,    0,   68,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,    0,    0,    0,    0,    0,    0,   29,   32,
   36,   37,   38,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,   45,    0,   58,    0,    0,
    0,    0,    0,    0,   88,   89,    0,    0,   85,    0,
    0,   99,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   91,    0,    0,  114,    0,    0,    0,    0,  100,
    0,    0,   42,   43,    0,    0,    0,    0,    0,  106,
    0,    0,    0,   44,   46,    0,   92,    0,    0,   94,
    0,  101,    0,    0,    0,    0,   61,    0,    0,  109,
   48,   93,    0,   49,    0,    0,   66,   65,    0,  110,
    0,   63,    0,   40,    0,    0,    0,    0,  107,   64,
   41,
};
final static short yydgoto[] = {                          3,
    4,    5,   74,   25,   40,   10,   15,   27,   41,   42,
   75,   52,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,   86,  167,   87,  147,  190,   88,  100,  101,
   91,  208,  247,   92,   93,  115,  154,  230,
};
final static short yysindex[] = {                      -232,
 -231, -215,    0, -232,    0, -216, -225,    0, -220,  -66,
 -216,    0,    0,  -48,  131,    0,    0,    0,    0,    0,
 -211,  162,    0,    0,   29,  -87,    0,  279,    0,  -85,
    0,   66,    3,    0,   70,  162,    0,  162,    0,  -74,
   76,   78,   79,    0,   -4,  162,   -4,    0,    0,    0,
    0,    4,    0,    0,   83,   84,  -19, 1419,    0, -189,
   86,   88,   91,    0,   92, 1419, 1419, 1228, 1375,    0,
  101, -143,  105,    0,    0,    0,    0,   87,    0,   89,
    0,    0,    0,   95,   99,  100, 1194,  104,    0, -109,
    0,    0,    0, 1419, 1455, 1419,   43, -107, 1253,    0,
 -106,  132,   82, 1419,  134,  135, 1419,  -13,  -13,  -96,
  711,    0,  768,    0,  -10,  -94,  122, -197,    0,    0,
    0,    0,    0, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 1419, 1419, 1419, 1419, 1419, 1419,    0, 1419, 1419, 1419,
 1419,  145,  840,  138,  866,    0, 1419,    0, 1419,  145,
  149, 1394, 1253,   -1,    0,    0,  890,  158,    0,  -76,
  -88,    0,  157, 1419,  -72,  -73,  -84, 1352, 1341,  681,
  681,  -32,  -32,  -15,  -15,  -13,  -13,  -13,  681,  681,
  485,  464,  -32, 1253, 1419,   34, 1419,   34,  916, -117,
  517,    0,  968, 1419,    0,  -71, 1419,  -78,  -55,    0,
 1419, 1253,    0,    0, 1419,  -75, 1419,  165,  171,    0,
  994,  -51,   34,    0,    0,  -75,    0, 1253,  180,    0,
 1419,    0, 1028,  556, 1419, 1049,    0, 1455,   34,    0,
    0,    0,  580,    0, 1419,   34,    0,    0,  181,    0,
 1419,    0, 1091,    0,   34, 1253,  130,   34,    0,    0,
    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  230,    0,  112,    0,    0,    0,    0,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  186,    0,    0,    0,  205,    0,  205,    0,    0,
    0,  207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -58,    0,    0,    0,    0,    0,  -57,    0,    0,
    0,    0,    0,    0,    0,   -9,   -9,   -9,   -9,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  615,    0,
    0,    0,    0,   -9,  -58,   -9, 1402,    0,  200,    0,
    0,    0,    0,   -9,    0,    0,   -9,  119,  151,    0,
    0,    0,    0,  453,    0,    0, 1300,    0,    0,    0,
    0,    0,    0,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
   -9,   -9,   -9,   -9,   -9,   -9,    0,   -9,   -9,   -9,
   -9, 1141,    0,    0,    0,    0,   -9,    0,   -9,   56,
    0,   -9,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   -9,    0,    0,    0,  421,   50,  354,
 1512, 1663, 1679, 1504, 1550,  306,  401,  427, 1558, 1613,
    0, 1643, 1480,  -17,  -25,  -58,   -9,  -58,    0,    0,
    0,    0,    0,   -9,    0,    0,   -9,    0,    0,    0,
   -9,   -6,    0,    0,   -9, 1173,   -9,    0,  231,    0,
    0,  -33,  -58,    0,    0,   93,    0,   40,    0,    0,
   -9,    0,    0,    0,   -9,    0,    0,  -22,  -58,    0,
    0,    0,    0,    0,   -9,  -58,    0,    0,    0,    0,
   -9,    0,    0,    0,  -58,  187,    0,  -58,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,  277,   24,   75,   26,  271,  267,    0,  247,    0,
   60,    0, -163,    0,    0,    0,  -86,    0,    0,    0,
    0,    0,    0,    0, 1856,    0,    0,    0,  643, 1503,
    0,    0,    0,  -49,    0,    0,  102,    0,
};
final static int YYTABLESIZE=2097;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        111,
   53,  113,  199,   33,  134,   33,  111,  214,  144,  132,
  130,  111,  131,  137,  133,  103,   33,   33,   53,  114,
   96,  134,  210,   50,  212,  111,  132,  136,    1,  135,
  137,  133,  137,  161,   51,  199,   67,  112,   24,  195,
   26,   50,  194,   68,    6,    7,    9,   30,   66,  231,
   11,   24,   51,   26,    2,   12,   13,  111,  149,   17,
   18,   19,   20,   21,   29,  240,   67,   17,   18,   19,
   20,   21,  244,   68,   16,  149,  105,  149,   66,  105,
  104,  249,  162,  104,  251,  103,  102,   31,  165,  111,
   84,  111,   59,   84,   69,   37,   59,   59,   59,   59,
   59,   59,   59,   97,   49,   36,   51,   84,   84,   38,
   39,  200,   39,   59,   59,   59,   45,   59,   48,   47,
   50,   46,   94,   95,   69,  104,   48,  105,   70,   60,
  106,  107,  117,   60,   60,   60,   60,   60,   60,   60,
  116,  239,   84,  166,  118,  119,   59,  120,   59,  222,
   60,   60,   60,  121,   60,   86,   48,  122,  123,   86,
   86,   86,   86,   86,  141,   86,  142,  146,  148,  150,
  215,  151,  152,   53,  155,  156,   86,   86,   86,  158,
   86,  163,  164,   60,  185,   60,   64,   87,   32,  192,
   35,   87,   87,   87,   87,   87,  187,   87,  197,  198,
  201,   44,  204,  203,  219,  227,   53,  205,   87,   87,
   87,   86,   87,  221,  194,  225,  229,   55,   55,   64,
  232,  245,  250,  111,  111,  111,  111,  111,  111,    1,
  111,  111,  111,  111,   15,  111,  111,  111,  111,  111,
  111,  111,  111,   87,    5,   20,  111,   19,  126,  127,
   55,  111,  111,   55,  111,   23,  139,  140,  112,  111,
   17,   18,   19,   20,   21,   53,   55,   54,   55,   56,
   57,  102,   58,   59,   60,   61,   62,   63,   64,   62,
    8,   14,   28,   65,   43,    0,  209,    0,   71,   72,
   17,   18,   19,   20,   21,   53,   73,   54,   55,   56,
   57,    0,   58,   59,   60,   61,   62,   63,   64,    0,
    0,    0,    0,   65,   84,   84,   84,    0,   71,   72,
   59,   59,   59,    0,    0,    0,   73,   84,    0,    0,
    0,    0,   59,   59,    0,    0,   59,   59,   59,   59,
    0,    0,   72,    0,   59,   59,   72,   72,   72,   72,
   72,    0,   72,    0,    0,    0,    0,   60,   60,   60,
    0,    0,    0,   72,   72,   72,    0,   72,    0,   60,
   60,    0,    0,   60,   60,   60,   60,    0,    0,    0,
    0,   60,   60,   86,   86,   86,    0,   17,   18,   19,
   20,   21,    0,    0,   81,   86,   86,   81,   72,   86,
   86,   86,   86,   34,    0,    0,    0,   86,   86,   22,
    0,   81,   81,    0,    0,   87,   87,   87,   17,   18,
   19,   20,   21,    0,    0,    0,    0,   87,   87,    0,
    0,   87,   87,   87,   87,    0,    0,   73,    0,   87,
   87,   73,   73,   73,   73,   73,   81,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   73,   73,
   73,   83,   73,   74,   83,    0,    0,   74,   74,   74,
   74,   74,    0,   74,    0,    0,    0,    0,   83,   83,
    0,    0,    0,    0,   74,   74,   74,    0,   74,   69,
    0,    0,    0,   73,   69,   69,  101,   69,   69,   69,
  134,    0,    0,    0,    0,  132,  130,    0,  131,  137,
  133,    0,   69,   83,   69,    0,    0,    0,    0,   74,
    0,  134,    0,  136,    0,  135,  132,  130,    0,  131,
  137,  133,    0,    0,    0,   17,   18,   19,   20,   21,
    0,    0,  207,   69,  136,  101,  135,    0,    0,    0,
    0,    0,    0,  134,  149,    0,    0,   22,  132,  130,
    0,  131,  137,  133,    0,    0,    0,    0,    0,    0,
   72,   72,   72,    0,  207,  149,  136,  206,  135,    0,
    0,    0,   72,   72,    0,    0,   72,   72,   72,   72,
    0,    0,  134,    0,   72,   72,  236,  132,  130,    0,
  131,  137,  133,    0,    0,    0,    0,  149,    0,  216,
    0,    0,    0,    0,    0,  136,  134,  135,   81,   81,
   81,  132,  130,    0,  131,  137,  133,    0,    0,    0,
   81,   81,    0,    0,    0,    0,   81,   81,    0,  136,
    0,  135,   81,   81,    0,    0,  149,    0,    0,    0,
    0,   68,    0,    0,    0,   52,   68,   68,    0,   68,
   68,   68,    0,    0,    0,   73,   73,   73,    0,    0,
  149,    0,  242,   52,   68,    0,   68,   73,   73,    0,
    0,   73,   73,   73,   73,   83,   83,   83,    0,   73,
   73,   74,   74,   74,   89,    0,    0,   83,   83,    0,
    0,    0,    0,   74,   74,   68,    0,   74,   74,   74,
   74,    0,    0,    0,    0,   74,   74,  134,   69,    0,
    0,    0,  132,  130,    0,  131,  137,  133,    0,   69,
   69,    0,    0,   69,   69,   69,   69,   89,    0,    0,
    0,   69,   69,    0,  126,  127,    0,  134,    0,    0,
    0,  159,  132,  130,    0,  131,  137,  133,    0,    0,
    0,  124,  125,    0,    0,  126,  127,  128,  129,    0,
  136,  149,  135,  139,  140,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  124,  125,    0,    0,  126,  127,  128,
  129,  149,    0,    0,  134,  139,  140,    0,    0,  132,
  130,    0,  131,  137,  133,    0,    0,    0,    0,    0,
  235,    0,    0,    0,    0,    0,    0,  136,   89,  135,
   89,    0,  124,  125,    0,    0,  126,  127,  128,  129,
    0,    0,    0,    0,  139,  140,  241,    0,    0,    0,
    0,    0,    0,    0,    0,   89,  124,  125,  149,    0,
  126,  127,  128,  129,    0,    0,    0,    0,  139,  140,
   89,   89,    0,    0,    0,    0,  134,    0,   89,    0,
  186,  132,  130,    0,  131,  137,  133,   89,    0,    0,
   89,   68,   68,    0,    0,   68,   68,   68,   68,  136,
    0,  135,  134,   68,   68,    0,  188,  132,  130,    0,
  131,  137,  133,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  136,  134,  135,    0,    0,
  149,  132,  130,  196,  131,  137,  133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  136,
    0,  135,  134,    0,    0,    0,  149,  132,  130,    0,
  131,  137,  133,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  213,    0,  136,    0,  135,    0,    0,
  149,    0,    0,    0,    0,    0,    0,  124,  125,    0,
    0,  126,  127,  128,  129,    0,    0,    0,    0,  139,
  140,    0,    0,    0,  134,    0,  149,    0,    0,  132,
  130,    0,  131,  137,  133,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  136,    0,  135,
  134,    0,    0,  160,    0,  132,  130,    0,  131,  137,
  133,    0,    0,    0,  124,  125,    0,    0,  126,  127,
  128,  129,  228,  136,    0,  135,  139,  140,  149,    0,
  217,    0,    0,    0,  134,    0,    0,    0,  234,  132,
  130,    0,  131,  137,  133,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  149,  134,    0,  136,    0,  135,
  132,  130,    0,  131,  137,  133,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  136,    0,
  135,    0,    0,    0,    0,    0,  124,  125,  149,    0,
  126,  127,  128,  129,    0,    0,    0,  134,  139,  140,
    0,  248,  132,  130,    0,  131,  137,  133,    0,  149,
    0,  238,  124,  125,    0,    0,  126,  127,  128,  129,
  136,    0,  135,    0,  139,  140,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,  125,    0,    0,
  126,  127,  128,  129,    0,    0,    0,   59,  139,  140,
    0,  149,   59,   59,    0,   59,   59,   59,    0,    0,
    0,    0,  124,  125,    0,    0,  126,  127,  128,  129,
   59,   56,   59,    0,  139,  140,    0,    0,    0,   60,
    0,    0,    0,    0,   60,   60,    0,   60,   60,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  134,   59,   60,   57,   60,  132,  130,    0,  131,  137,
  133,    0,    0,    0,  124,  125,    0,    0,  126,  127,
  128,  129,    0,  136,    0,  135,  139,  140,    0,    0,
   67,    0,    0,   60,    0,    0,    0,   68,    0,    0,
  124,  125,   66,    0,  126,  127,  128,  129,    0,    0,
    0,    0,  139,  140,  138,    0,    0,    0,    0,  134,
    0,    0,    0,    0,  132,  130,    0,  131,  137,  133,
    0,    0,    0,    0,  124,  125,    0,    0,  126,  127,
  128,  129,  136,    0,  135,    0,  139,  140,   69,    0,
    0,    0,    0,    0,    0,  124,  125,    0,    0,  126,
  127,  128,  129,    0,    0,    0,   58,  139,  140,    0,
    0,   58,   58,  149,   58,   58,   58,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
    0,   58,    0,    0,    0,    0,    0,  124,  125,    0,
    0,  126,  127,  128,  129,    0,    0,  134,    0,  139,
  140,    0,  132,  130,    0,  131,  137,  133,  134,    0,
   58,    0,    0,  132,  130,    0,  131,  137,  133,    0,
  136,    0,  135,    0,    0,    0,    0,   67,    0,    0,
    0,  136,    0,  135,   68,    0,    0,   59,   59,   66,
    0,   59,   59,   59,   59,    0,   67,    0,    0,   59,
   59,  149,    0,   68,   47,    0,    0,    0,   66,    0,
    0,   47,  149,    0,    0,    0,   47,    0,    0,   60,
   60,   67,    0,   60,   60,   60,   60,    0,   68,    0,
    0,   60,   60,   66,    0,   69,    0,  112,    0,    0,
  124,  125,    0,    0,  126,  127,  128,  129,    0,    0,
    0,    0,  139,  140,   69,    0,   37,   67,  110,   53,
    0,   54,   47,    0,   68,    0,    0,    0,   60,   66,
   62,   63,   64,    0,    0,    0,    0,   65,    0,   69,
    0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
   78,    0,    0,   78,    0,    0,    0,    0,    0,  124,
  125,    0,    0,  126,  127,  128,  129,   78,   78,    0,
    0,  139,  140,    0,   70,   69,   70,   70,   70,    0,
    0,    0,   82,    0,   90,   82,    0,    0,    0,    0,
    0,   70,   70,   70,    0,   70,    0,    0,    0,   82,
   82,    0,   78,    0,    0,    0,   58,   58,    0,    0,
   58,   58,   58,   58,    0,    0,    0,    0,   58,   58,
   71,    0,   71,   71,   71,    0,   70,   90,   80,    0,
    0,   80,    0,    0,   82,    0,    0,   71,   71,   71,
    0,   71,    0,    0,    0,   80,   80,  124,    0,    0,
    0,  126,  127,  128,  129,    0,    0,    0,    0,  139,
  140,    0,  126,  127,  128,  129,   53,    0,   54,    0,
  139,  140,   71,    0,    0,   60,    0,   62,   63,   64,
   80,    0,    0,   79,   65,   53,   79,   54,    0,    0,
   98,    0,    0,   47,   60,   47,   62,   63,   64,    0,
   79,   79,   47,   65,   47,   47,   47,   47,    0,   98,
   53,   47,   54,   77,    0,    0,   77,   47,   90,   60,
   90,   62,   63,   64,    0,    0,    0,    0,   65,    0,
   77,   77,    0,   75,   98,   79,   75,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   53,    0,   54,   76,
   75,   75,   76,    0,    0,   60,    0,   62,   63,   64,
   90,   90,    0,    0,   65,   77,   76,   76,   90,    0,
   72,    0,    0,    0,   78,   78,   78,   90,    0,    0,
   90,    0,    0,    0,    0,   75,   78,   78,    0,    0,
    0,    0,   78,   78,    0,    0,    0,    0,   70,   70,
   70,   76,    0,    0,    0,    0,   82,   82,   82,    0,
   70,   70,    0,    0,   70,   70,   70,   70,   82,   82,
    0,    0,   70,   70,   82,   82,    0,    0,    0,    0,
   82,   82,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   71,   71,   71,    0,    0,    0,
    0,    0,   80,   80,   80,    0,   71,   71,    0,    0,
   71,   71,   71,   71,   80,   80,    0,    0,   71,   71,
   80,   80,    0,    0,    0,    0,   80,   80,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   79,   79,   79,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
   79,    0,    0,    0,    0,   79,   79,    0,    0,    0,
    0,   79,   79,    0,    0,    0,    0,   77,   77,   77,
    0,    0,    0,   99,    0,    0,    0,    0,    0,   77,
   77,  108,  109,  111,  113,   77,   77,   75,   75,   75,
    0,   77,   77,    0,    0,    0,    0,    0,    0,   75,
   75,    0,    0,   76,   76,   76,    0,    0,    0,  143,
    0,  145,    0,    0,    0,   76,   76,    0,    0,  153,
    0,    0,  157,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  168,
  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
  179,  180,    0,  181,  182,  183,  184,    0,    0,    0,
    0,    0,  189,    0,  191,    0,    0,  193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  202,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  153,    0,  211,    0,    0,    0,    0,    0,    0,  218,
    0,    0,  220,    0,    0,    0,  223,    0,    0,    0,
  224,    0,  226,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  233,    0,    0,    0,
  237,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  243,    0,    0,    0,    0,    0,  246,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
   59,   59,   91,   91,   37,   91,   40,  125,   95,   42,
   43,   45,   45,   46,   47,   41,   91,   91,   41,   69,
   40,   37,  186,   41,  188,   59,   42,   60,  261,   62,
   46,   47,   46,   44,   41,   91,   33,   93,   15,   41,
   15,   59,   44,   40,  276,  261,  263,   22,   45,  213,
  276,   28,   59,   28,  287,  276,  123,   91,   91,  257,
  258,  259,  260,  261,  276,  229,   33,  257,  258,  259,
  260,  261,  236,   40,  123,   91,   41,   91,   45,   44,
   41,  245,   93,   44,  248,   60,  276,   59,  286,  123,
   41,  125,   37,   44,   91,   93,   41,   42,   43,   44,
   45,   46,   47,  123,   45,   40,   47,   58,   59,   40,
   36,  161,   38,   58,   59,   60,   41,   62,  123,   41,
   46,   44,   40,   40,   91,   40,  123,   40,  125,   37,
   40,   40,  276,   41,   42,   43,   44,   45,   46,   47,
   40,  228,   93,  118,   40,   59,   91,   59,   93,  199,
   58,   59,   60,   59,   62,   37,  123,   59,   59,   41,
   42,   43,   44,   45,   61,   47,  276,  125,  276,  276,
  288,   40,   91,  262,   41,   41,   58,   59,   60,  276,
   62,  276,   61,   91,   40,   93,  275,   37,  276,   41,
  276,   41,   42,   43,   44,   45,   59,   47,   41,  276,
   44,  276,  276,  276,  276,   41,  262,  292,   58,   59,
   60,   93,   62,  292,   44,  291,  268,  276,  276,  275,
   41,   41,   93,  257,  258,  259,  260,  261,  262,    0,
  264,  265,  266,  267,  123,  269,  270,  271,  272,  273,
  274,  275,  276,   93,   59,   41,  280,   41,  281,  282,
  276,  285,  286,  276,  288,  125,  289,  290,   59,  293,
  257,  258,  259,  260,  261,  262,  276,  264,  265,  266,
  267,   41,  269,  270,  271,  272,  273,  274,  275,   93,
    4,   11,   16,  280,   38,   -1,  185,   -1,  285,  286,
  257,  258,  259,  260,  261,  262,  293,  264,  265,  266,
  267,   -1,  269,  270,  271,  272,  273,  274,  275,   -1,
   -1,   -1,   -1,  280,  265,  266,  267,   -1,  285,  286,
  265,  266,  267,   -1,   -1,   -1,  293,  278,   -1,   -1,
   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
   -1,   -1,   37,   -1,  289,  290,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,  265,  266,  267,   -1,  257,  258,  259,
  260,  261,   -1,   -1,   41,  277,  278,   44,   93,  281,
  282,  283,  284,  125,   -1,   -1,   -1,  289,  290,  279,
   -1,   58,   59,   -1,   -1,  265,  266,  267,  257,  258,
  259,  260,  261,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   37,   -1,  289,
  290,   41,   42,   43,   44,   45,   93,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   41,   62,   37,   44,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   37,
   -1,   -1,   -1,   93,   42,   43,   44,   45,   46,   47,
   37,   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   60,   93,   62,   -1,   -1,   -1,   -1,   93,
   -1,   37,   -1,   60,   -1,   62,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,  257,  258,  259,  260,  261,
   -1,   -1,   58,   91,   60,   93,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   91,   -1,   -1,  279,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  265,  266,  267,   -1,   58,   91,   60,   93,   62,   -1,
   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
   -1,   -1,   37,   -1,  289,  290,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   91,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   60,   37,   62,  265,  266,
  267,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,   -1,   60,
   -1,   62,  289,  290,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   37,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,  265,  266,  267,   -1,   -1,
   91,   -1,   93,   59,   60,   -1,   62,  277,  278,   -1,
   -1,  281,  282,  283,  284,  265,  266,  267,   -1,  289,
  290,  265,  266,  267,   52,   -1,   -1,  277,  278,   -1,
   -1,   -1,   -1,  277,  278,   91,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,   -1,  289,  290,   37,  266,   -1,
   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   95,   -1,   -1,
   -1,  289,  290,   -1,  281,  282,   -1,   37,   -1,   -1,
   -1,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,
   60,   91,   62,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   91,   -1,   -1,   37,  289,  290,   -1,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
  265,   -1,   -1,   -1,   -1,   -1,   -1,   60,  186,   62,
  188,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  213,  277,  278,   91,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,  290,
  228,  229,   -1,   -1,   -1,   -1,   37,   -1,  236,   -1,
   41,   42,   43,   -1,   45,   46,   47,  245,   -1,   -1,
  248,  277,  278,   -1,   -1,  281,  282,  283,  284,   60,
   -1,   62,   37,  289,  290,   -1,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   37,   62,   -1,   -1,
   91,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   37,   -1,   -1,   -1,   91,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   60,   -1,   62,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,
  290,   -1,   -1,   -1,   37,   -1,   91,   -1,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   37,   -1,   -1,  266,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   59,   60,   -1,   62,  289,  290,   91,   -1,
   93,   -1,   -1,   -1,   37,   -1,   -1,   -1,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   37,   -1,   60,   -1,   62,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,  277,  278,   91,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,   37,  289,  290,
   -1,   41,   42,   43,   -1,   45,   46,   47,   -1,   91,
   -1,   93,  277,  278,   -1,   -1,  281,  282,  283,  284,
   60,   -1,   62,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,   37,  289,  290,
   -1,   91,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,
   60,   61,   62,   -1,  289,  290,   -1,   -1,   -1,   37,
   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   91,   60,   61,   62,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   60,   -1,   62,  289,  290,   -1,   -1,
   33,   -1,   -1,   91,   -1,   -1,   -1,   40,   -1,   -1,
  277,  278,   45,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   91,   -1,   -1,   -1,   -1,   37,
   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   60,   -1,   62,   -1,  289,  290,   91,   -1,
   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,   -1,   -1,   37,  289,  290,   -1,
   -1,   42,   43,   91,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   37,   -1,  289,
  290,   -1,   42,   43,   -1,   45,   46,   47,   37,   -1,
   91,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   60,   -1,   62,   40,   -1,   -1,  277,  278,   45,
   -1,  281,  282,  283,  284,   -1,   33,   -1,   -1,  289,
  290,   91,   -1,   40,   33,   -1,   -1,   -1,   45,   -1,
   -1,   40,   91,   -1,   -1,   -1,   45,   -1,   -1,  277,
  278,   33,   -1,  281,  282,  283,  284,   -1,   40,   -1,
   -1,  289,  290,   45,   -1,   91,   -1,   93,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   91,   -1,   93,   33,  261,  262,
   -1,  264,   91,   -1,   40,   -1,   -1,   -1,  271,   45,
  273,  274,  275,   -1,   -1,   -1,   -1,  280,   -1,   91,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   58,   59,   -1,
   -1,  289,  290,   -1,   41,   91,   43,   44,   45,   -1,
   -1,   -1,   41,   -1,   52,   44,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   -1,   -1,   -1,   58,
   59,   -1,   93,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,  290,
   41,   -1,   43,   44,   45,   -1,   93,   95,   41,   -1,
   -1,   44,   -1,   -1,   93,   -1,   -1,   58,   59,   60,
   -1,   62,   -1,   -1,   -1,   58,   59,  277,   -1,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,
  290,   -1,  281,  282,  283,  284,  262,   -1,  264,   -1,
  289,  290,   93,   -1,   -1,  271,   -1,  273,  274,  275,
   93,   -1,   -1,   41,  280,  262,   44,  264,   -1,   -1,
  286,   -1,   -1,  262,  271,  264,  273,  274,  275,   -1,
   58,   59,  271,  280,  273,  274,  275,  276,   -1,  286,
  262,  280,  264,   41,   -1,   -1,   44,  286,  186,  271,
  188,  273,  274,  275,   -1,   -1,   -1,   -1,  280,   -1,
   58,   59,   -1,   41,  286,   93,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  213,  262,   -1,  264,   41,
   58,   59,   44,   -1,   -1,  271,   -1,  273,  274,  275,
  228,  229,   -1,   -1,  280,   93,   58,   59,  236,   -1,
  286,   -1,   -1,   -1,  265,  266,  267,  245,   -1,   -1,
  248,   -1,   -1,   -1,   -1,   93,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,  265,  266,
  267,   93,   -1,   -1,   -1,   -1,  265,  266,  267,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,  277,  278,
   -1,   -1,  289,  290,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  265,  266,  267,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,  277,  278,   -1,   -1,  289,  290,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   -1,   -1,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,   -1,  277,
  278,   66,   67,   68,   69,  283,  284,  265,  266,  267,
   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   94,
   -1,   96,   -1,   -1,   -1,  277,  278,   -1,   -1,  104,
   -1,   -1,  107,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,   -1,  138,  139,  140,  141,   -1,   -1,   -1,
   -1,   -1,  147,   -1,  149,   -1,   -1,  152,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  164,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  185,   -1,  187,   -1,   -1,   -1,   -1,   -1,   -1,  194,
   -1,   -1,  197,   -1,   -1,   -1,  201,   -1,   -1,   -1,
  205,   -1,  207,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  221,   -1,   -1,   -1,
  225,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  235,   -1,   -1,   -1,   -1,   -1,  241,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"VOID","BOOL","INT","STRING",
"CLASS","NULL","EXTENDS","THIS","WHILE","FOR","IF","ELSE","RETURN","BREAK",
"NEW","PRINT","READ_INTEGER","READ_LINE","LITERAL","IDENTIFIER","AND","OR",
"STATIC","INSTANCEOF","LESS_EQUAL","GREATER_EQUAL","EQUAL","NOT_EQUAL","SCOPY",
"VAR","SEALED","DIVIDER","ARRAY_REPEAT","ARRAY_CONCAT","DEFAULT","IN","FOREACH",
"LISTFORR","LISTFORL","UMINUS","EMPTY",
};
final static String yyrule[] = {
"$accept : Program",
"Program : ClassList",
"ClassList : ClassList ClassDef",
"ClassList : ClassDef",
"VariableDef : Variable ';'",
"Variable : Type IDENTIFIER",
"Type : INT",
"Type : VOID",
"Type : BOOL",
"Type : STRING",
"Type : CLASS IDENTIFIER",
"Type : Type '[' ']'",
"ClassDef : SEALED CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"ClassDef : CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"ExtendsClause : EXTENDS IDENTIFIER",
"ExtendsClause :",
"FieldList : FieldList VariableDef",
"FieldList : FieldList FunctionDef",
"FieldList :",
"Formals : VariableList",
"Formals :",
"VariableList : VariableList ',' Variable",
"VariableList : Variable",
"FunctionDef : STATIC Type IDENTIFIER '(' Formals ')' StmtBlock",
"FunctionDef : Type IDENTIFIER '(' Formals ')' StmtBlock",
"StmtBlock : '{' StmtList '}'",
"StmtList : StmtList Stmt",
"StmtList :",
"Stmt : ForeachStmt",
"Stmt : OCStmt ';'",
"Stmt : GuardedStmt",
"Stmt : VariableDef",
"Stmt : SimpleStmt ';'",
"Stmt : IfStmt",
"Stmt : WhileStmt",
"Stmt : ForStmt",
"Stmt : ReturnStmt ';'",
"Stmt : PrintStmt ';'",
"Stmt : BreakStmt ';'",
"Stmt : StmtBlock",
"ForeachStmt : FOREACH '(' BoundVariable IN Expr ')' Stmt",
"ForeachStmt : FOREACH '(' BoundVariable IN Expr WHILE Expr ')' Stmt",
"BoundVariable : VAR IDENTIFIER",
"BoundVariable : Type IDENTIFIER",
"GuardedStmt : IF '{' IfBranchG IfStmtG '}'",
"GuardedStmt : IF '{' '}'",
"IfBranchG : IfBranchG IfStmtG DIVIDER",
"IfBranchG :",
"IfStmtG : Expr ':' Stmt",
"OCStmt : SCOPY '(' IDENTIFIER ',' Expr ')'",
"SimpleStmt : LValuel '=' Expr",
"SimpleStmt : VAR IDENTIFIER '=' Expr",
"SimpleStmt : Call",
"SimpleStmt :",
"Receiver : Expr '.'",
"Receiver :",
"LValuel : Receiver IDENTIFIER",
"LValuel : Expr '[' Expr ']'",
"LValue : VAR IDENTIFIER",
"LValue : Receiver IDENTIFIER",
"LValue : Expr '[' Expr ']'",
"Call : Receiver IDENTIFIER '(' Actuals ')'",
"BoolExpr : Expr",
"Expr : '[' Expr FOR IDENTIFIER IN Expr ']'",
"Expr : '[' Expr FOR IDENTIFIER IN Expr IF BoolExpr ']'",
"Expr : Expr '[' Expr ':' Expr ']'",
"Expr : Expr '[' Expr ']' DEFAULT Expr",
"Expr : LValue",
"Expr : Call",
"Expr : Constant",
"Expr : Expr '+' Expr",
"Expr : Expr '-' Expr",
"Expr : Expr '*' Expr",
"Expr : Expr '/' Expr",
"Expr : Expr '%' Expr",
"Expr : Expr EQUAL Expr",
"Expr : Expr NOT_EQUAL Expr",
"Expr : Expr ARRAY_REPEAT Expr",
"Expr : Expr ARRAY_CONCAT Expr",
"Expr : Expr '<' Expr",
"Expr : Expr '>' Expr",
"Expr : Expr LESS_EQUAL Expr",
"Expr : Expr GREATER_EQUAL Expr",
"Expr : Expr AND Expr",
"Expr : Expr OR Expr",
"Expr : '(' Expr ')'",
"Expr : '-' Expr",
"Expr : '!' Expr",
"Expr : READ_INTEGER '(' ')'",
"Expr : READ_LINE '(' ')'",
"Expr : THIS",
"Expr : NEW IDENTIFIER '(' ')'",
"Expr : NEW Type '[' Expr ']'",
"Expr : INSTANCEOF '(' Expr ',' IDENTIFIER ')'",
"Expr : '(' CLASS IDENTIFIER ')' Expr",
"Constant : ArrayConstant",
"Constant : LITERAL",
"Constant : NULL",
"ArrayConstant : '[' ']'",
"ArrayConstant : '[' ArrayInsider ']'",
"ArrayInsider : ArrayInsider ',' Constant",
"ArrayInsider : Constant",
"Actuals : ExprList",
"Actuals :",
"ExprList : ExprList ',' Expr",
"ExprList : Expr",
"WhileStmt : WHILE '(' Expr ')' Stmt",
"ForStmt : FOR '(' SimpleStmt ';' Expr ';' SimpleStmt ')' Stmt",
"BreakStmt : BREAK",
"IfStmt : IF '(' Expr ')' Stmt ElseClause",
"ElseClause : ELSE Stmt",
"ElseClause :",
"ReturnStmt : RETURN Expr",
"ReturnStmt : RETURN",
"PrintStmt : PRINT '(' ExprList ')'",
};

//#line 571 "Parser.y"
    
	/**
	 * 打印当前归约所用的语法规则<br>
	 * 请勿修改。
	 */
    public boolean onReduce(String rule) {
		if (rule.startsWith("$$"))
			return false;
		else
			rule = rule.replaceAll(" \\$\\$\\d+", "");

   	    if (rule.endsWith(":"))
    	    System.out.println(rule + " <empty>");
   	    else
			System.out.println(rule);
		return false;
    }
    
    public void diagnose() {
		addReduceListener(this);
		yyparse();
	}
//#line 870 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0 || valptr<0)   //check for under & overflow here
            {
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0 || valptr<0)   //check for under & overflow here
              {
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    if (reduceListener == null || reduceListener.onReduce(yyrule[yyn])) // if intercepted!
      switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 61 "Parser.y"
{
						tree = new Tree.TopLevel(val_peek(0).clist, val_peek(0).loc);
					}
break;
case 2:
//#line 67 "Parser.y"
{
						yyval.clist.add(val_peek(0).cdef);
					}
break;
case 3:
//#line 71 "Parser.y"
{
                		yyval.clist = new ArrayList<Tree.ClassDef>();
                		yyval.clist.add(val_peek(0).cdef);
                	}
break;
case 5:
//#line 81 "Parser.y"
{
						yyval.vdef = new Tree.VarDef(val_peek(0).ident, val_peek(1).type, val_peek(0).loc);
					}
break;
case 6:
//#line 87 "Parser.y"
{
						yyval.type = new Tree.TypeIdent(Tree.INT, val_peek(0).loc);
					}
break;
case 7:
//#line 91 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.VOID, val_peek(0).loc);
                	}
break;
case 8:
//#line 95 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.BOOL, val_peek(0).loc);
                	}
break;
case 9:
//#line 99 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.STRING, val_peek(0).loc);
                	}
break;
case 10:
//#line 103 "Parser.y"
{
                		yyval.type = new Tree.TypeClass(val_peek(0).ident, val_peek(1).loc);
                	}
break;
case 11:
//#line 107 "Parser.y"
{
                		yyval.type = new Tree.TypeArray(val_peek(2).type, val_peek(2).loc);
                	}
break;
case 12:
//#line 113 "Parser.y"
{
						yyval.cdef = new Tree.ClassDef(true, val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(6).loc);
					}
break;
case 13:
//#line 117 "Parser.y"
{
                        yyval.cdef = new Tree.ClassDef(false, val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(5).loc);
                    }
break;
case 14:
//#line 123 "Parser.y"
{
						yyval.ident = val_peek(0).ident;
					}
break;
case 15:
//#line 127 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 16:
//#line 133 "Parser.y"
{
						yyval.flist.add(val_peek(0).vdef);
					}
break;
case 17:
//#line 137 "Parser.y"
{
						yyval.flist.add(val_peek(0).fdef);
					}
break;
case 18:
//#line 141 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.flist = new ArrayList<Tree>();
                	}
break;
case 20:
//#line 149 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.vlist = new ArrayList<Tree.VarDef>();
                	}
break;
case 21:
//#line 156 "Parser.y"
{
						yyval.vlist.add(val_peek(0).vdef);
					}
break;
case 22:
//#line 160 "Parser.y"
{
                		yyval.vlist = new ArrayList<Tree.VarDef>();
						yyval.vlist.add(val_peek(0).vdef);
                	}
break;
case 23:
//#line 168 "Parser.y"
{
						yyval.fdef = new MethodDef(true, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 24:
//#line 172 "Parser.y"
{
						yyval.fdef = new MethodDef(false, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 25:
//#line 178 "Parser.y"
{
						yyval.stmt = new Block(val_peek(1).slist, val_peek(2).loc);
					}
break;
case 26:
//#line 184 "Parser.y"
{
						yyval.slist.add(val_peek(0).stmt);
					}
break;
case 27:
//#line 188 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.slist = new ArrayList<Tree>();
                	}
break;
case 31:
//#line 198 "Parser.y"
{
						yyval.stmt = val_peek(0).vdef;
					}
break;
case 32:
//#line 203 "Parser.y"
{
                		if (yyval.stmt == null) {
                			yyval.stmt = new Tree.Skip(val_peek(0).loc);
                		}
                	}
break;
case 40:
//#line 218 "Parser.y"
{
                        yyval.stmt = new Tree.ArrayFor(false, val_peek(4).lvalue, val_peek(2).expr, val_peek(0).stmt, null, val_peek(6).loc);
                    }
break;
case 41:
//#line 222 "Parser.y"
{
                        yyval.stmt = new Tree.ArrayFor(true, val_peek(6).lvalue, val_peek(4).expr, val_peek(0).stmt, val_peek(2).expr, val_peek(8).loc);
                    }
break;
case 42:
//#line 228 "Parser.y"
{
                        yyval.lvalue = new LValue.BoundVar(null, val_peek(0).ident, val_peek(1).loc);
                    }
break;
case 43:
//#line 232 "Parser.y"
{
                        yyval.lvalue = new LValue.BoundVar(val_peek(1).type, val_peek(0).ident, val_peek(1).loc);
                    }
break;
case 44:
//#line 239 "Parser.y"
{
                    val_peek(2).slist.add(val_peek(1).stmt);
                    yyval.stmt = new Tree.Guard(val_peek(2).slist, val_peek(4).loc);

                }
break;
case 45:
//#line 245 "Parser.y"
{
                    yyval.stmt = new Tree.Guard(null, val_peek(2).loc);
                }
break;
case 46:
//#line 251 "Parser.y"
{
                        yyval.slist.add(val_peek(1).stmt);
                    }
break;
case 47:
//#line 255 "Parser.y"
{
                        yyval = new SemValue();
                        yyval.slist = new ArrayList<Tree>();
                    }
break;
case 48:
//#line 262 "Parser.y"
{
                        yyval.stmt = new Tree.IfG(val_peek(2).expr, val_peek(0).stmt, val_peek(2).loc);
                    }
break;
case 49:
//#line 269 "Parser.y"
{
                        yyval.stmt = new Tree.Scopy(val_peek(3).ident, val_peek(1).expr, val_peek(3).loc);
                    }
break;
case 50:
//#line 275 "Parser.y"
{
						yyval.stmt = new Tree.Assign(val_peek(2).lvalue, val_peek(0).expr, val_peek(1).loc);
					}
break;
case 51:
//#line 279 "Parser.y"
{
                        yyval.lvalue = new Tree.IdentVar(val_peek(2).ident, val_peek(2).loc);
                        yyval.stmt = new Tree.VarAssign(val_peek(0).expr, val_peek(2).loc, val_peek(2).ident);
                    }
break;
case 52:
//#line 284 "Parser.y"
{
                		yyval.stmt = new Tree.Exec(val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 53:
//#line 288 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 55:
//#line 295 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 56:
//#line 301 "Parser.y"
{
						yyval.lvalue = new Tree.Ident(val_peek(1).expr, val_peek(0).ident, val_peek(0).loc);
						if (val_peek(1).loc == null) {
							yyval.loc = val_peek(0).loc;
						}
					}
break;
case 57:
//#line 308 "Parser.y"
{
                		yyval.lvalue = new Tree.Indexed(val_peek(3).expr, val_peek(1).expr, val_peek(3).loc);
                	}
break;
case 58:
//#line 314 "Parser.y"
{
                        yyval.lvalue = new Tree.IdentVar(val_peek(0).ident, val_peek(0).loc);
                        if (val_peek(1).loc == null) {
                        yyval.loc = val_peek(0).loc;
                        }
                    }
break;
case 59:
//#line 321 "Parser.y"
{
						yyval.lvalue = new Tree.Ident(val_peek(1).expr, val_peek(0).ident, val_peek(0).loc);
						if (val_peek(1).loc == null) {
							yyval.loc = val_peek(0).loc;
						}
					}
break;
case 60:
//#line 328 "Parser.y"
{
                		yyval.lvalue = new Tree.Indexed(val_peek(3).expr, val_peek(1).expr, val_peek(3).loc);
                	}
break;
case 61:
//#line 334 "Parser.y"
{
						yyval.expr = new Tree.CallExpr(val_peek(4).expr, val_peek(3).ident, val_peek(1).elist, val_peek(3).loc);
						if (val_peek(4).loc == null) {
							yyval.loc = val_peek(3).loc;
						}
					}
break;
case 63:
//#line 346 "Parser.y"
{
                        yyval.expr = new Tree.ArrayComp(false, val_peek(5).expr, val_peek(3).ident, val_peek(1).expr, null, val_peek(6).loc);
                    }
break;
case 64:
//#line 350 "Parser.y"
{
                        yyval.expr = new Tree.ArrayComp(true, val_peek(7).expr, val_peek(5).ident, val_peek(3).expr, val_peek(1).expr, val_peek(8).loc);
                    }
break;
case 65:
//#line 354 "Parser.y"
{
                        yyval.expr = new Tree.ArrayRef(val_peek(5).expr, val_peek(3).expr, val_peek(1).expr, val_peek(5).loc);
                    }
break;
case 66:
//#line 358 "Parser.y"
{
                        yyval.expr = new Tree.ArrayDefault(val_peek(5).expr, val_peek(3).expr, val_peek(0).expr, val_peek(5).loc);
                    }
break;
case 67:
//#line 362 "Parser.y"
{
						yyval.expr = val_peek(0).lvalue;
					}
break;
case 70:
//#line 368 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.PLUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 71:
//#line 372 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MINUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 72:
//#line 376 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MUL, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 73:
//#line 380 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.DIV, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 74:
//#line 384 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MOD, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 75:
//#line 388 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.EQ, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 76:
//#line 392 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.NE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 77:
//#line 396 "Parser.y"
{
                        yyval.expr = new Tree.ArrayInit(val_peek(2).expr, val_peek(0).expr, val_peek(2).loc);
                    }
break;
case 78:
//#line 400 "Parser.y"
{
                        yyval.expr = new Tree.ArrayConcat(val_peek(2).expr, val_peek(0).expr, val_peek(2).loc);
                    }
break;
case 79:
//#line 404 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 80:
//#line 408 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 81:
//#line 412 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 82:
//#line 416 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 83:
//#line 420 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.AND, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 84:
//#line 424 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.OR, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 85:
//#line 428 "Parser.y"
{
                		yyval = val_peek(1);
                	}
break;
case 86:
//#line 432 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NEG, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 87:
//#line 436 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NOT, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 88:
//#line 440 "Parser.y"
{
                		yyval.expr = new Tree.ReadIntExpr(val_peek(2).loc);
                	}
break;
case 89:
//#line 444 "Parser.y"
{
                		yyval.expr = new Tree.ReadLineExpr(val_peek(2).loc);
                	}
break;
case 90:
//#line 448 "Parser.y"
{
                		yyval.expr = new Tree.ThisExpr(val_peek(0).loc);
                	}
break;
case 91:
//#line 452 "Parser.y"
{
                		yyval.expr = new Tree.NewClass(val_peek(2).ident, val_peek(3).loc);
                	}
break;
case 92:
//#line 456 "Parser.y"
{
                		yyval.expr = new Tree.NewArray(val_peek(3).type, val_peek(1).expr, val_peek(4).loc);
                	}
break;
case 93:
//#line 460 "Parser.y"
{
                		yyval.expr = new Tree.TypeTest(val_peek(3).expr, val_peek(1).ident, val_peek(5).loc);
                	}
break;
case 94:
//#line 464 "Parser.y"
{
                		yyval.expr = new Tree.TypeCast(val_peek(2).ident, val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 96:
//#line 471 "Parser.y"
{
						yyval.expr = new Tree.Literal(val_peek(0).typeTag, val_peek(0).literal, val_peek(0).loc);
					}
break;
case 97:
//#line 475 "Parser.y"
{
						yyval.expr = new Null(val_peek(0).loc);
					}
break;
case 98:
//#line 481 "Parser.y"
{
                        yyval.expr = new Tree.Array(null, val_peek(1).loc);
                    }
break;
case 99:
//#line 485 "Parser.y"
{
                        yyval.expr = new Tree.Array(val_peek(1).elist, val_peek(2).loc);
                    }
break;
case 100:
//#line 491 "Parser.y"
{
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 101:
//#line 495 "Parser.y"
{
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
                	}
break;
case 103:
//#line 503 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.elist = new ArrayList<Tree.Expr>();
                	}
break;
case 104:
//#line 510 "Parser.y"
{
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 105:
//#line 514 "Parser.y"
{
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
                	}
break;
case 106:
//#line 521 "Parser.y"
{
						yyval.stmt = new Tree.WhileLoop(val_peek(2).expr, val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 107:
//#line 527 "Parser.y"
{
						yyval.stmt = new Tree.ForLoop(val_peek(6).stmt, val_peek(4).expr, val_peek(2).stmt, val_peek(0).stmt, val_peek(8).loc);
					}
break;
case 108:
//#line 533 "Parser.y"
{
						yyval.stmt = new Tree.Break(val_peek(0).loc);
					}
break;
case 109:
//#line 539 "Parser.y"
{
						yyval.stmt = new Tree.If(val_peek(3).expr, val_peek(1).stmt, val_peek(0).stmt, val_peek(5).loc);
					}
break;
case 110:
//#line 545 "Parser.y"
{
						yyval.stmt = val_peek(0).stmt;
					}
break;
case 111:
//#line 549 "Parser.y"
{
						yyval = new SemValue();
					}
break;
case 112:
//#line 555 "Parser.y"
{
						yyval.stmt = new Tree.Return(val_peek(0).expr, val_peek(1).loc);
					}
break;
case 113:
//#line 559 "Parser.y"
{
                		yyval.stmt = new Tree.Return(null, val_peek(0).loc);
                	}
break;
case 114:
//#line 565 "Parser.y"
{
						yyval.stmt = new Print(val_peek(1).elist, val_peek(3).loc);
					}
break;
//#line 1618 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
